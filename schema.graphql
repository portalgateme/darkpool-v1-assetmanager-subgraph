type Deposit @entity(immutable: true) {
  id: Bytes!
  noteOut: Bytes! # bytes32
  amount: BigInt! # uint256
  asset: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Join @entity(immutable: true) {
  id: Bytes!
  nullifierIn1: Bytes! # bytes32
  nullifierIn2: Bytes! # bytes32
  noteOut1: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type JoinSplit @entity(immutable: true) {
  id: Bytes!
  nullifierIn1: Bytes! # bytes32
  nullifierIn2: Bytes! # bytes32
  noteOut1: Bytes! # bytes32
  noteOut2: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Split @entity(immutable: true) {
  id: Bytes!
  nullifierIn: Bytes! # bytes32
  noteOut1: Bytes! # bytes32
  noteOut2: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  nullifierIn: Bytes! # bytes32
  noteOut: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdraw @entity(immutable: true) {
  id: Bytes!
  nullifierIn: Bytes! # bytes32
  amount: BigInt! # uint256
  asset: Bytes! # address
  recipient: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type UniswapSwapAssetManagerOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UniswapSwap @entity(immutable: true) {
  id: Bytes!
  assetIn: Bytes! # address
  assetOut: Bytes! # address
  amountIn: BigInt! # uint256
  amountOut: BigInt! # uint256
  noteNullifierIn: Bytes! # bytes32
  noteCommitmentOut: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type UniswapLiquidityAssetManagerOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UniswapCollectFees @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  amounts: [BigInt!]! # uint256[2]
  feeNoteCommitments: [BigInt!]! # uint256[2]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UniswapLiquidityProvision @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  positionNote: BigInt! # uint256
  nullifiers: [Bytes!]! # bytes32[2]
  changeAmounts: [BigInt!]! # uint256[2]
  changeNoteCommitments: [BigInt!]! # uint256[2]
  changeNoteFooters: [Bytes!]! # bytes32[2]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UniswapRemoveLiquidity @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  positionNullifier: Bytes! # bytes32
  amounts: [BigInt!]! # uint256[2]
  outNoteCommitments: [BigInt!]! # uint256[2]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type CurveExchange @entity(immutable: true) {
  id: Bytes!
  nullifiers: Bytes! # bytes32
  noteOut: Bytes! # bytes32
  amountOut: BigInt! # uint256
  noteFooter: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CurveSingleExchangeAssetManagerOwnershipTransferred
  @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type CurveMultiExchangeAssetManagerCurveExchange @entity(immutable: true) {
  id: Bytes!
  nullifiers: Bytes! # bytes32
  noteOut: Bytes! # bytes32
  amountOut: BigInt! # uint256
  noteFooter: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CurveMultiExchangeAssetManagerOwnershipTransferred
  @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type CurveAddLiquidity @entity(immutable: true) {
  id: Bytes!
  nullifiers: [Bytes!]! # bytes32[4]
  noteOut: Bytes! # bytes32
  amountOut: BigInt! # uint256
  noteFooter: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CurveAddLiquidityAssetManagerOwnershipTransferred
  @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type CurveRemoveLiquidity @entity(immutable: true) {
  id: Bytes!
  outPut: [Bytes!]! # tuple[5]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CurveRemoveLiquidityAssetManagerOwnershipTransferred
  @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type CurveFSNAddLiquidityAssetManagerCurveAddLiquidity
  @entity(immutable: true) {
  id: Bytes!
  nullifiers: [Bytes!]! # bytes32[4]
  noteOut: Bytes! # bytes32
  amountOut: BigInt! # uint256
  noteFooter: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CurveFSNAddLiquidityAssetManagerOwnershipTransferred
  @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type CurveFSNRemoveLiquidityAssetManagerCurveRemoveLiquidity
  @entity(immutable: true) {
  id: Bytes!
  outPut: [Bytes!]! # tuple[5]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CurveFSNRemoveLiquidityAssetManagerOwnershipTransferred
  @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type CurveMPAddLiquidityAssetManagerCurveAddLiquidity @entity(immutable: true) {
  id: Bytes!
  nullifiers: [Bytes!]! # bytes32[4]
  noteOut: Bytes! # bytes32
  amountOut: BigInt! # uint256
  noteFooter: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CurveMPAddLiquidityAssetManagerOwnershipTransferred
  @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type CurveMPRemoveLiquidityAssetManagerCurveRemoveLiquidity
  @entity(immutable: true) {
  id: Bytes!
  outPut: [Bytes!]! # tuple[5]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CurveMPRemoveLiquidityAssetManagerOwnershipTransferred
  @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
